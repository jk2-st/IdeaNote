AWSTemplateFormatVersion: 2010-09-09
Description: >-
  IdeaNote server less application

Transform:
- AWS::Serverless-2016-10-31

Parameters:
  Env:
    Type: String
    AllowedValues:
      - stg
      - prod

Mappings:
  DB:
    TableName:
      stg: IdeaNoteDB-stg
      prod: IdeaNoteDB-prod

Conditions:
  IsProd:
    !Equals [!Ref Env, prod]

Resources:
  # API declaration
  IdeaNoteApi:
    Type: AWS::Serverless::Api
    MethodSettings: 
        DataTraceEnabled: true
        MetricsEnabled: true
        HttpMethod: '*'
        # ResourcePath: !Sub '${VersionParam}/*'
        # LoggingLevel: INFO
    Properties:
      Name: IdeaNoteApi 
      StageName: !Ref Env
      TracingEnabled: true
      Cors:
        AllowOrigin: "'*'"
        AllowMethods: "'OPTIONS,HEAD,GET,PUT,POST,DELETE'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      Auth:
        Authorizers:
          cognitoAuth:
            UserPoolArn: arn:aws:cognito-idp:ap-northeast-1:260029619298:userpool/ap-northeast-1_9HZqR6BBm
        DefaultAuthorizer: cognitoAuth
        AddDefaultAuthorizerToCorsPreflight: false
        InvokeRole: CALLER_CREDENTIALS
      MethodSettings:
        - DataTraceEnabled: true
          # LoggingLevel: INFO
          ResourcePath: '/*'
          HttpMethod: '*'

  # テーマリスト取得API
  getAllThemeFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-all-theme.getAllThemeHandler
      Runtime: nodejs18.x
      Description: A simple example includes a HTTP get method to get all items from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the TableName
        - DynamoDBCrudPolicy:
            TableName: !If [IsProd, !FindInMap [DB, TableName, prod], !FindInMap [DB, TableName, stg]]
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !If [IsProd, !FindInMap [DB, TableName, prod], !FindInMap [DB, TableName, stg]]
      Events:
        GetTheme:
          Type: Api
          Properties:
            Path: /themes
            Method: GET
            RestApiId: !Ref IdeaNoteApi
      Layers:
        - !Ref IdeaNoteLayer
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # コメントリスト取得API
  getCommentsBythemeFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-comments-by-id.getCommentsById
      Runtime: nodejs18.x
      Description: A simple example includes a HTTP get method to get one item by id from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the TableName
        - DynamoDBCrudPolicy:
            TableName: !If [IsProd, !FindInMap [DB, TableName, prod], !FindInMap [DB, TableName, stg]]
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !If [IsProd, !FindInMap [DB, TableName, prod], !FindInMap [DB, TableName, stg]]
      Events:
        GetComments:
          Type: Api
          Properties:
            Path: /themes/{theme_id}/comments
            Method: GET
            RestApiId: !Ref IdeaNoteApi
      Layers:
        - !Ref IdeaNoteLayer
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # テーマ登録API
  postThemeFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/post-theme.postThemeHandler
      Runtime: nodejs18.x
      Description: A simple example includes a HTTP post method to add one item to a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the TableName
        - DynamoDBCrudPolicy:
            TableName: !If [IsProd, !FindInMap [DB, TableName, prod], !FindInMap [DB, TableName, stg]]
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !If [IsProd, !FindInMap [DB, TableName, prod], !FindInMap [DB, TableName, stg]]
      Events:
        Api:
          Type: Api
          Properties:
            Path: /themes
            Method: POST
            RestApiId: !Ref IdeaNoteApi
      Layers:
        - !Ref IdeaNoteLayer
  # This is a Lambda function config associated with the source code: put-item.js
  # コメント登録API
  postCommentFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/post-comment.postCommentHandler
      Runtime: nodejs18.x
      Description: A simple example includes a HTTP post method to add one item to a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the TableName
        - DynamoDBCrudPolicy:
            TableName: !If [IsProd, !FindInMap [DB, TableName, prod], !FindInMap [DB, TableName, stg]]
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !If [IsProd, !FindInMap [DB, TableName, prod], !FindInMap [DB, TableName, stg]]
      Events:
        Api:
          Type: Api
          Properties:
            Path: /comments
            Method: POST
            RestApiId: !Ref IdeaNoteApi
      Layers:
        - !Ref IdeaNoteLayer

  # コメント更新API
  putCommentFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/post-comment.postCommentHandler
      Runtime: nodejs18.x
      Description: A simple example includes a HTTP post method to add one item to a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the TableName
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref TableName
      Events:
        Api:
          Type: Api
          Properties:
            Path: /comments/{id}
            Method: PUT
            RestApiId: !Ref IdeaNoteApi
      Layers:
        - !Ref IdeaNoteLayer

  # コメント削除API
  deleteCommentFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/post-comment.postCommentHandler
      Runtime: nodejs18.x
      Description: A simple example includes a HTTP post method to add one item to a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the TableName
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref TableName
      Events:
        Api:
          Type: Api
          Properties:
            Path: /comments/{id}
            Method: DELETE
            RestApiId: !Ref IdeaNoteApi
      Layers:
        - !Ref IdeaNoteLayer

  IdeaNoteLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: buildResponse
      ContentUri: src/layers
      CompatibleRuntimes:
        - nodejs18.x

# Outputs:
  # WebEndpoint:
    # Description: "API Gateway endpoint URL for Prod stage"
    # Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
